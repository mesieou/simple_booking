/**
 * Standardized message format for incoming messages from any channel for internal chatbot processing.
 */
export interface ParsedMessage {
  channelType: 'whatsapp' | 'web' | 'messenger' | 'local_test' | 'unknown'; // To identify the source
  messageId?: string;         // Original message ID from the channel, if available
  senderId: string;           // User's unique ID on that channel
  userName?: string;          // User's display name, if available
  recipientId: string;        // Your bot's ID/number on that channel
  businessWhatsappNumber?: string; // The business WhatsApp number customers are messaging TO (for WhatsApp)
  customerWhatsappNumber?: string; // The customer's WhatsApp number who is messaging FROM (for WhatsApp)
  timestamp: Date;            // Standardized timestamp
  text?: string;               // Primary text content of the message
  attachments?: Array<{
    type: 'image' | 'audio' | 'video' | 'document' | 'sticker' | 'location' | 'contact' | 'interactive_reply' | 'unsupported';
    payload: any; // Raw payload of the attachment (e.g., URL, coordinates, interactive reply data)
    caption?: string; 
  }>;
  originalPayload: any;       // Keep the raw payload for debugging or channel-specific actions
}

/**
 * Standardized format for responses generated by the core chatbot logic.
 */
export interface BotResponse {
  text?: string;                // Primary text response
  buttons?: Array<{ 
    buttonText: string;   // The text displayed on the button
    buttonValue: string;  // The value sent back to the bot when pressed
    buttonType?: 'postback' | 'link';
    buttonDescription?: string; // Additional description for the button (e.g., price, duration)
  }>;
  // Future enhancements for rich responses:
  // images?: Array<{ url: string; altText?: string }>;
  // customPayload?: any; // For channel-specific rich content not covered above
}

/**
 * Interface (contract) for all channel-specific message senders.
 */
export interface IMessageSender {
  /**
   * Sends a message to the specified recipient on a specific channel.
   * @param recipientId The unique ID of the user on the channel.
   * @param response The standardized bot response to send.
   * @returns A Promise that resolves when the message sending attempt is complete.
   */
  sendMessage(recipientId: string, response: BotResponse): Promise<void>;
} 